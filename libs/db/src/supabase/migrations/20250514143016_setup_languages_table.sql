-- lowercase sql

-- 1. create the languages table
create table public.languages (
  id bigint generated by default as identity primary key,
  code text not null unique, -- e.g., 'en', 'fr' (BCP 47 language tags)
  name text not null, -- e.g., 'English', 'Français'
  is_default boolean not null default false,
  created_at timestamp with time zone not null default now(),
  updated_at timestamp with time zone not null default now()
);

comment on table public.languages is 'Stores supported languages for the CMS.';
comment on column public.languages.code is 'BCP 47 language code (e.g., en, en-US, fr, fr-CA).';
comment on column public.languages.name is 'Human-readable name of the language.';
comment on column public.languages.is_default is 'Indicates if this is the default fallback language.';

-- 2. create a partial unique index to ensure only one language can be default
-- This ensures data integrity at the database level for the is_default flag.
create unique index ensure_single_default_language_idx
on public.languages (is_default)
where (is_default = true);

-- 3. seed initial languages: english (default) and french
insert into public.languages (code, name, is_default)
values
  ('en', 'English', true),
  ('fr', 'Français', false);

-- 4. enable row level security (rls) on the languages table
alter table public.languages enable row level security;

-- 5. create rls policies for the languages table
-- policy: allow public read access to languages
create policy "languages_are_publicly_readable"
on public.languages for select
to anon, authenticated
using (true);

-- policy: allow admins to manage languages (insert, update, delete)
create policy "admins_can_manage_languages"
on public.languages for all -- covers insert, update, delete
to authenticated
using (
  -- check if the user is an admin by calling the helper function created in phase 1
  public.get_current_user_role() = 'ADMIN'
)
with check (
  public.get_current_user_role() = 'ADMIN'
);

-- (Optional) Trigger to automatically update 'updated_at' timestamp
create or replace function public.handle_languages_update()
returns trigger
language plpgsql
as $$
begin
  new.updated_at = now();
  return new;
end;
$$;

create trigger on_languages_update
  before update on public.languages
  for each row
  execute procedure public.handle_languages_update();