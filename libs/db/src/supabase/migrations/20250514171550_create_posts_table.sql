-- lowercase sql

create table public.posts (
  id bigint generated by default as identity primary key,
  language_id bigint not null references public.languages(id) on delete cascade,
  author_id uuid references public.profiles(id) on delete set null,
  title text not null,
  slug text not null,
  excerpt text,
  status public.page_status not null default 'draft', -- reuse page_status
  published_at timestamp with time zone,
  meta_title text,
  meta_description text,
  created_at timestamp with time zone not null default now(),
  updated_at timestamp with time zone not null default now()
);

comment on table public.posts is 'stores blog posts or news articles.';
comment on column public.posts.slug is 'url-friendly identifier, unique per language.';
comment on column public.posts.excerpt is 'a short summary of the post.';
comment on column public.posts.published_at is 'date and time for publication.';

alter table public.posts
  add constraint posts_language_id_slug_key unique (language_id, slug);

alter table public.posts enable row level security;

create policy "posts_are_publicly_readable_when_published"
on public.posts for select
to anon, authenticated
using (status = 'published' and (published_at is null or published_at <= now()));

create policy "authors_writers_admins_can_read_own_draft_posts"
on public.posts for select
to authenticated
using (
  (status <> 'published' and author_id = auth.uid()) or
  (status <> 'published'and public.get_current_user_role() in ('ADMIN', 'WRITER'))
);

create policy "admins_and_writers_can_manage_posts"
on public.posts for all
to authenticated
using (public.get_current_user_role() in ('ADMIN', 'WRITER'))
with check (public.get_current_user_role() in ('ADMIN', 'WRITER'));

create or replace function public.handle_posts_update()
returns trigger
language plpgsql
security definer set search_path = public
as $$
begin
  new.updated_at = now();
  return new;
end;
$$;

create trigger on_posts_update
  before update on public.posts
  for each row
  execute procedure public.handle_posts_update();