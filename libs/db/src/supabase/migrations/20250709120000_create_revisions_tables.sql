-- supabase/migrations/20250709120000_create_revisions_tables.sql
-- Hybrid revision history for pages and posts

begin;

-- Create enum for revision type if not exists
do $$
begin
  if not exists (select 1 from pg_type where typname = 'revision_type') then
    create type public.revision_type as enum ('snapshot', 'diff');
  end if;
end
$$;

-- Add version column to pages and posts if not exists
do $$
begin
  if not exists (
    select 1 from information_schema.columns
    where table_schema = 'public' and table_name = 'pages' and column_name = 'version'
  ) then
    alter table public.pages add column version integer not null default 1;
    comment on column public.pages.version is 'Monotonic version number for hybrid revisions.';
  end if;
end
$$;

do $$
begin
  if not exists (
    select 1 from information_schema.columns
    where table_schema = 'public' and table_name = 'posts' and column_name = 'version'
  ) then
    alter table public.posts add column version integer not null default 1;
    comment on column public.posts.version is 'Monotonic version number for hybrid revisions.';
  end if;
end
$$;

-- Create page_revisions table
create table if not exists public.page_revisions (
  id bigint generated by default as identity primary key,
  page_id bigint not null references public.pages(id) on delete cascade,
  author_id uuid references public.profiles(id) on delete set null,
  version integer not null,
  revision_type public.revision_type not null,
  content jsonb not null,
  created_at timestamp with time zone not null default now(),
  constraint page_revisions_page_version_key unique (page_id, version)
);

comment on table public.page_revisions is 'Hybrid (snapshot/diff) revisions for pages.';
comment on column public.page_revisions.content is 'If snapshot: full content; if diff: JSON Patch array.';

create index if not exists idx_page_revisions_page_id on public.page_revisions(page_id);
create index if not exists idx_page_revisions_page_id_version on public.page_revisions(page_id, version);

-- Create post_revisions table
create table if not exists public.post_revisions (
  id bigint generated by default as identity primary key,
  post_id bigint not null references public.posts(id) on delete cascade,
  author_id uuid references public.profiles(id) on delete set null,
  version integer not null,
  revision_type public.revision_type not null,
  content jsonb not null,
  created_at timestamp with time zone not null default now(),
  constraint post_revisions_post_version_key unique (post_id, version)
);

comment on table public.post_revisions is 'Hybrid (snapshot/diff) revisions for posts.';
comment on column public.post_revisions.content is 'If snapshot: full content; if diff: JSON Patch array.';

create index if not exists idx_post_revisions_post_id on public.post_revisions(post_id);
create index if not exists idx_post_revisions_post_id_version on public.post_revisions(post_id, version);

-- Enable RLS and add policies (admins and writers manage; authenticated can read)
alter table public.page_revisions enable row level security;
alter table public.post_revisions enable row level security;

-- Page revisions policies
drop policy if exists "page_revisions_admin_writer_management" on public.page_revisions;
create policy "page_revisions_admin_writer_management"
on public.page_revisions for all
to authenticated
using (public.get_current_user_role() in ('ADMIN', 'WRITER'))
with check (public.get_current_user_role() in ('ADMIN', 'WRITER'));

drop policy if exists "page_revisions_authenticated_read" on public.page_revisions;
create policy "page_revisions_authenticated_read"
on public.page_revisions for select
to authenticated
using (true);

-- Post revisions policies
drop policy if exists "post_revisions_admin_writer_management" on public.post_revisions;
create policy "post_revisions_admin_writer_management"
on public.post_revisions for all
to authenticated
using (public.get_current_user_role() in ('ADMIN', 'WRITER'))
with check (public.get_current_user_role() in ('ADMIN', 'WRITER'));

drop policy if exists "post_revisions_authenticated_read" on public.post_revisions;
create policy "post_revisions_authenticated_read"
on public.post_revisions for select
to authenticated
using (true);

commit;

